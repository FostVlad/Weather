package com.goloveschenko.weather.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.goloveschenko.weather.dao.OrmWeather.WeatherType;
import com.goloveschenko.weather.dao.OrmWeather.WeatherTypeConverter;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORM_WEATHER".
*/
public class OrmWeatherDao extends AbstractDao<OrmWeather, Long> {

    public static final String TABLENAME = "ORM_WEATHER";

    /**
     * Properties of entity OrmWeather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CityId = new Property(1, Long.class, "cityId", false, "CITY_ID");
        public final static Property Location = new Property(2, String.class, "location", false, "LOCATION");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property IconCode = new Property(4, Integer.class, "iconCode", false, "ICON_CODE");
        public final static Property Details = new Property(5, String.class, "details", false, "DETAILS");
        public final static Property Humidity = new Property(6, Integer.class, "humidity", false, "HUMIDITY");
        public final static Property Pressure = new Property(7, Double.class, "pressure", false, "PRESSURE");
        public final static Property Temp = new Property(8, Integer.class, "temp", false, "TEMP");
        public final static Property TempMin = new Property(9, Integer.class, "tempMin", false, "TEMP_MIN");
        public final static Property TempMax = new Property(10, Integer.class, "tempMax", false, "TEMP_MAX");
        public final static Property IsDay = new Property(11, Boolean.class, "isDay", false, "IS_DAY");
        public final static Property Type = new Property(12, Integer.class, "type", false, "TYPE");
    }

    private DaoSession daoSession;

    private final WeatherTypeConverter typeConverter = new WeatherTypeConverter();
    private Query<OrmWeather> ormCity_WeatherListQuery;

    public OrmWeatherDao(DaoConfig config) {
        super(config);
    }
    
    public OrmWeatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORM_WEATHER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CITY_ID\" INTEGER NOT NULL ," + // 1: cityId
                "\"LOCATION\" TEXT," + // 2: location
                "\"DATE\" TEXT," + // 3: date
                "\"ICON_CODE\" INTEGER," + // 4: iconCode
                "\"DETAILS\" TEXT," + // 5: details
                "\"HUMIDITY\" INTEGER," + // 6: humidity
                "\"PRESSURE\" REAL," + // 7: pressure
                "\"TEMP\" INTEGER," + // 8: temp
                "\"TEMP_MIN\" INTEGER," + // 9: tempMin
                "\"TEMP_MAX\" INTEGER," + // 10: tempMax
                "\"IS_DAY\" INTEGER," + // 11: isDay
                "\"TYPE\" INTEGER);"); // 12: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORM_WEATHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrmWeather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCityId());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        Integer iconCode = entity.getIconCode();
        if (iconCode != null) {
            stmt.bindLong(5, iconCode);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(6, details);
        }
 
        Integer humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindLong(7, humidity);
        }
 
        Double pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindDouble(8, pressure);
        }
 
        Integer temp = entity.getTemp();
        if (temp != null) {
            stmt.bindLong(9, temp);
        }
 
        Integer tempMin = entity.getTempMin();
        if (tempMin != null) {
            stmt.bindLong(10, tempMin);
        }
 
        Integer tempMax = entity.getTempMax();
        if (tempMax != null) {
            stmt.bindLong(11, tempMax);
        }
 
        Boolean isDay = entity.getIsDay();
        if (isDay != null) {
            stmt.bindLong(12, isDay ? 1L: 0L);
        }
 
        WeatherType type = entity.getType();
        if (type != null) {
            stmt.bindLong(13, typeConverter.convertToDatabaseValue(type));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrmWeather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCityId());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        Integer iconCode = entity.getIconCode();
        if (iconCode != null) {
            stmt.bindLong(5, iconCode);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(6, details);
        }
 
        Integer humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindLong(7, humidity);
        }
 
        Double pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindDouble(8, pressure);
        }
 
        Integer temp = entity.getTemp();
        if (temp != null) {
            stmt.bindLong(9, temp);
        }
 
        Integer tempMin = entity.getTempMin();
        if (tempMin != null) {
            stmt.bindLong(10, tempMin);
        }
 
        Integer tempMax = entity.getTempMax();
        if (tempMax != null) {
            stmt.bindLong(11, tempMax);
        }
 
        Boolean isDay = entity.getIsDay();
        if (isDay != null) {
            stmt.bindLong(12, isDay ? 1L: 0L);
        }
 
        WeatherType type = entity.getType();
        if (type != null) {
            stmt.bindLong(13, typeConverter.convertToDatabaseValue(type));
        }
    }

    @Override
    protected final void attachEntity(OrmWeather entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrmWeather readEntity(Cursor cursor, int offset) {
        OrmWeather entity = new OrmWeather( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // cityId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // location
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // iconCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // details
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // humidity
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // pressure
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // temp
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // tempMin
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // tempMax
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isDay
            cursor.isNull(offset + 12) ? null : typeConverter.convertToEntityProperty(cursor.getInt(offset + 12)) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrmWeather entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCityId(cursor.getLong(offset + 1));
        entity.setLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIconCode(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDetails(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHumidity(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPressure(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setTemp(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTempMin(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTempMax(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setIsDay(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setType(cursor.isNull(offset + 12) ? null : typeConverter.convertToEntityProperty(cursor.getInt(offset + 12)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrmWeather entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrmWeather entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrmWeather entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "weatherList" to-many relationship of OrmCity. */
    public List<OrmWeather> _queryOrmCity_WeatherList(Long cityId) {
        synchronized (this) {
            if (ormCity_WeatherListQuery == null) {
                QueryBuilder<OrmWeather> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CityId.eq(null));
                ormCity_WeatherListQuery = queryBuilder.build();
            }
        }
        Query<OrmWeather> query = ormCity_WeatherListQuery.forCurrentThread();
        query.setParameter(0, cityId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOrmCityDao().getAllColumns());
            builder.append(" FROM ORM_WEATHER T");
            builder.append(" LEFT JOIN ORM_CITY T0 ON T.\"CITY_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OrmWeather loadCurrentDeep(Cursor cursor, boolean lock) {
        OrmWeather entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        OrmCity city = loadCurrentOther(daoSession.getOrmCityDao(), cursor, offset);
         if(city != null) {
            entity.setCity(city);
        }

        return entity;    
    }

    public OrmWeather loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OrmWeather> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OrmWeather> list = new ArrayList<OrmWeather>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OrmWeather> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OrmWeather> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
